import Head from "next/head";
import EventCard from "@/components/EventCard";
import EventType from "@/components/EventType";
import { Box, CircularProgress, Container, Typography } from "@mui/material";
import { useInfiniteQuery } from "@tanstack/react-query";
import { getEvents, getRecommendedEvents } from "@/services/events";
import InfiniteScroll from "react-infinite-scroller";
import EventNotFound from "@/components/EventNotFound";
import { getSession } from "next-auth/react";

export default function Home() {
  const { data, isLoading, hasNextPage, fetchNextPage } = useInfiniteQuery({
    queryKey: ["events"],
    queryFn: async ({ pageParam }) => {
      const session = await getSession();
      if (session && session.user.role.includes("User")) {
        const data = await getRecommendedEvents(pageParam);
        return data;
      } else {
        const data = await getEvents(pageParam);
        return data;
      }
    },
    initialPageParam: 1,
    getNextPageParam: (lastPage) => {
      const nextPage =
        lastPage && lastPage.events.length > 0
          ? lastPage.pageNumber + 1
          : undefined;
      return nextPage;
    },
  });

  return (
    <>
      <Head>
        <title>KUEventHub</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container component="main" maxWidth="lg">
        <Typography
          component="h1"
          sx={{ mb: 2, fontWeight: "bold", fontSize: "20px" }}
        >
          ประเภทกิจกรรม
        </Typography>
        <EventType />

        <Typography
          component="h1"
          sx={{ mt: 4, mb: 2, fontWeight: "bold", fontSize: "20px" }}
        >
          กิจกรรมทั้งหมด
        </Typography>

        {isLoading ? (
          <Box
            component="div"
            sx={{
              display: "flex",
              flexDirection: "column",
              height: "70vh",
              justifyContent: "center",
            }}
          >
            <Box sx={{ display: "flex", justifyContent: "center", mx: "auto" }}>
              <CircularProgress color="primary" />
            </Box>
          </Box>
        ) : data?.pages[0] === null ? (
          <Box
            component="div"
            sx={{
              display: "flex",
              flexDirection: "column",
              height: "60vh",
              justifyContent: "center",
            }}
          >
            <EventNotFound />
          </Box>
        ) : (
          <InfiniteScroll
            hasMore={hasNextPage}
            loadMore={() => fetchNextPage()}
          >
            {data &&
              data.pages.map((page, index) => (
                <Box key={index} sx={{ mt: { xs: 2, md: 3 } }}>
                  <EventCard events={page?.events} />
                </Box>
              ))}
          </InfiniteScroll>
        )}
      </Container>
    </>
  );
}
